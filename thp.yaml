esphome:
  name: thp-sensor

esp32:
  board: m5stack-core2
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
#  password: ""

ota:
  platform: esphome
#    password: ""

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Thp-Sensor Fallback Hotspot"
    password: "6ntCbqUxDzCf"

captive_portal:

substitutions:
  devicename: "m5stack_core2"
  upper_devicename: "M5stack-Core2"

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO38

i2c:
  - id: bus_internal
    sda: GPIO21
    scl: GPIO22
    scan: true
  - id: port_a
    sda: GPIO32
    scl: GPIO33
    scan: true

sensor:
  - platform: axp2101
    id: power_mgmt
    model: M5CORE2
    address: 0x34
    i2c_id: bus_internal
    update_interval: 30s
    brightness: 50%
    battery_voltage:
      name: "Battery Voltage"
    battery_level:
      name: "Battery Level"
    battery_charging:
      name: "Battery Charging"

  - platform: sht4x
    i2c_id: port_a
    temperature:
      name: "Temperature - SHT40"
      id: "temperature_sht40"
    humidity:
      name: "Humidity - SHT40"
      id: "humidity_sht40"
    address: 0x44
    update_interval: 10s

  - platform: bmp280
    i2c_id: port_a
    temperature:
      name: "Temperature - BMP280"
      id: "temperature_bmp280"
      oversampling: 16x
    pressure:
      name: "Pressure BMP280"
      id: "pressure_bmp280"
    address: 0x76
    update_interval: 10s

  - platform: uptime
    name: "Uptime"

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    id: wifi_strength

  # - platform: axp192
  #   id: power_mgmt
  #   model: M5CORE2
  #   address: 0x34
  #   i2c_id: bus_internal
  #   update_interval: 30s
  #   brightness: 75%
  #   battery_level:
  #     name: "${devicename} Battery Level"
  #     id: batterylevel
  #     # accuracy_decimals: 0

touchscreen:
  - platform: ft63x6
    i2c_id: bus_internal
    on_touch:
      - logger.log:
          format: Touch %d at (%d, %d)
          args: [touch.id, touch.x, touch.y]

binary_sensor:
  - platform: touchscreen
    name: Left Touch Button
    x_min: 0
    x_max: 106
    y_min: 120
    y_max: 140

  - platform: touchscreen
    name: Middle Touch Button
    x_min: 107
    x_max: 213
    y_min: 120
    y_max: 140

  - platform: touchscreen
    name: Right Touch Button
    x_min: 214
    x_max: 320
    y_min: 120
    y_max: 140

text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address

# Fonts used on the display
font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 24
  - file: "gfonts://Roboto"
    id: title_font
    size: 38
  - file: "gfonts://Roboto"
    id: large_font
    size: 42
  - file: "gfonts://Roboto"
    id: mid_font
    size: 28
  - file: "gfonts://Roboto"
    id: small_font
    size: 18

# Colours used on the display
color:
  - id: color_white
    red: 100%
    green: 100%
    blue: 100%
  - id: color_grey
    red: 30%
    green: 30%
    blue: 40%
  - id: color_red
    red: 100%
    green: 3%
    blue: 5%

# builtin TFT
display:
  - platform: ili9xxx
    # 320x240
    model: M5STACK
    # model: ILI9342
    # dimensions: 320x240
    cs_pin: GPIO5
    dc_pin: GPIO15
    # reset_pin: 33
    lambda: |-
      //it.print(0, 0, id(roboto), "Hello World");
      //it.print(10, 20, id(roboto), "Hello Friend");
      //it.line(20, 20, 200, 200, id(color_white));
      // Header
      it.print(160, 0, id(title_font), id(color_white), TextAlign::TOP_CENTER, "Core2 THP");
      it.line(0, 50, it.get_width(), 50, id(color_grey));
      // Data
      it.printf(  5,  60, id(mid_font), id(color_white), TextAlign::TOP_LEFT, "Temp. SHT40");
      it.printf(200,  60, id(mid_font), id(color_white), TextAlign::TOP_LEFT, ": %.1f°C", id(temperature_sht40).state);
      it.printf(  5, 100, id(mid_font), id(color_white), TextAlign::TOP_LEFT, "Humidity");
      it.printf(200, 100, id(mid_font), id(color_white), TextAlign::TOP_LEFT, ": %.1f%%", id(humidity_sht40).state);
      it.printf(  5, 140, id(mid_font), id(color_white), TextAlign::TOP_LEFT, "Temp. BMP280");
      it.printf(200, 140, id(mid_font), id(color_white), TextAlign::TOP_LEFT, ": %.1f°C", id(temperature_bmp280).state);
      it.printf(  5, 180, id(mid_font), id(color_white), TextAlign::TOP_LEFT, "Pressure");
      it.printf(200, 180, id(mid_font), id(color_white), TextAlign::TOP_LEFT, ": %.1fhP", id(pressure_bmp280).state);
      // Footer
      it.line(0, 215, it.get_width(), 215, id(color_grey));
      if(isnan(id(wifi_strength).state) == 0){
        it.printf(240, 220, id(small_font), id(color_white), TextAlign::TOP_LEFT, "%.1fdB", id(wifi_strength).state);
      }
      else
      {
        it.printf(160, 220, id(small_font), id(color_red), TextAlign::TOP_CENTER, "Disconnected");
      }
      it.printf(10, 220, id(small_font), id(color_white), TextAlign::TOP_LEFT, "%s", id(ip_address).state.c_str());

switch:
  - platform: template
    optimistic: True
    turn_on_action:
      lambda: |-
        id(power_mgmt).set_brightness(1.0);
        id(power_mgmt).update();
    turn_off_action:
      lambda: |-
        id(power_mgmt).set_brightness(0.0);
        id(power_mgmt).update();
    id: display_backlight
    name: "Display Backlight"

# external_components:
#   #- source: github://pionizer/pionizer-axp192
#   #- source: github://eavyon/esphome-axp192
#   - source: github://martydingo/esphome-axp192
#     components: [axp192]

      # it.fill(color_white);

      # it.line(20, 20, 200, 200, id(color_white));
      #  // Header
      #  it.print(160, 0, id(title_font), id(color_white), TextAlign::TOP_CENTER, "Hello World");
      #  it.line(0, 50, it.get_width(), 50, id(color_grey));

      #  // Footer
      #  it.line(0, 215, it.get_width(), 215, id(color_grey));
      #  if(isnan(id(wifi_strength).state) == 0){
      #    it.printf(240, 220, id(small_font), id(color_white), TextAlign::TOP_LEFT, "%.1fdB", id(wifi_strength).state);
      #  }
      #  else
      #  {
      #    it.printf(160, 220, id(small_font), id(color_red), TextAlign::TOP_CENTER, "Disconnected");
      #  }

      #  it.printf(10, 220, id(small_font), id(color_white), TextAlign::TOP_LEFT, "%s", id(ip_address).state.c_str());
